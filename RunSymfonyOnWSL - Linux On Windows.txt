##Set up a Linux environment on Windows and then rebuild your symfony project in that environment##

1. Set up Windows Subsystem for Linux (WSL) using one of the numerous online instructions. For example, [see here](https://www.howtogeek.com/249966/how-to-install-and-use-the-linux-bash-shell-on-windows-10/).

Instructions below generally assume Ubuntu was the OS loaded. Other systems will be similar.

2. The WSL to Windows file system is weird. You can access files between the two systems (they use the same file system). However, there are issues.

	a. If you load Ubuntu from the store, its system is located at: C:\Users\linux_username\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_########\LocalState\rootfs\home\mylinuxusername

	b. If you are in the Ubuntu bash in your root directory, you can get to the windows drives using: 'cd /mnt'

or Windows User files using:

cd /mnt/c/Users/me_the_user

To get back to the Linux home user directory (i.e.; /home/mylinuxusername):

cd ~

In Windows command line, type wsl and hit return. It will automatically start up Linux for the folder you were currently in. In other words

C:\Users\windows_user_name\Documents\Projects

would become

linuxusername@computername:/mnt/c/Users/windows_user_name/Documents/Projects$

and you can run linux commands. HOWEVER!!!

However:
***Use the Ubuntu shell instead of the windows command line as the later will throw all kinds of access errors. It is probably better to keep linux programs and files separate from windows programs and files. That is, make a projects folder at 

linuxusername@computername:$/home/mylinuxusername (which is the same as linuxusername@computername:$~ in Linux environment)

Windows files meta data and Linux files meta data do not play well together. If you are getting permission errors in windows command console when operating in Linux, this is probably the problem. If you use a windows program to modify a Linux file and you can't access or see that file in Linux, this is the problem. 

Some methods to avoid this issue:

- Generally, use Linux programs to modify linux files and window programs to modify windows files.
- Use Linux shell to copy/move files to Linux instead of Windows command line or windows program. 
- If you do use a windows program to modify a file, restart the Ubuntu shell in order to see it, try running these commands:

sudo umount /mnt/c
sudo mount -t drvfs C: /mnt/c -o metadata

-You can use windows file explorer to move the files. However, you won't be able to see the file afterwards until you restart the WSL service. To restart, exit out of Ubuntu bash, goto windows services gui and restart LxssManager. Go back into Bash and you should see the file.
- Some websites claim that these issues only apply to files that exist in under the Linux root and that you should save your Linux files in your Windows directory. However, I haven't tested that.

################BUILD YOUR SYMFONY ENVIRONMENT...

Create a file system with mkdir so that there is a bin folder and a projects folder under your home dir: tlarson@LAPTOP-DAD:~$.

To run symfony projects in this Ubuntu/Linux environment, You'll need to install php first, then composer.

Then to load php into the Linux environment:

sudo add-apt-repository ppa:ondrej/php
sudo apt-get update && sudo apt-get upgrade
sudo apt-get install php-fpm php-mysql php7.1-cli php7.1-curl php7.1-mbstring php7.1-mcrypt php7.1-xml php7.1-zip php7.1-intl curl git unzip php-cli

(the php extensions need to added as necessary to run the symfony environment)

check if php installed: php -v
---------------------------------------------------------
To install composer:
curl -sS https://getcomposer.org/installer | php

then 

mv ~/composer.phar ~/bin/composer

(or you can try this command:
cd ~ 
curl -sS https://getcomposer.org/installer -o composer-setup.php 
sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
)

test with composer -v
--------------------------------------------
git needs to be installed so check with: git --version
if it isn't, install using apt

Then git clone your project into your projects folder and run composer install. If you are using webpack encore, make sure nodejs is installed and run the proper encore build command for Symfony.
